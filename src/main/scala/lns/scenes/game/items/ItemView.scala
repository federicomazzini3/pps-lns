package lns.scenes.game.items

import indigo.*
import indigo.shared.scenegraph.{ Graphic, Shape }
import indigoextras.geometry.{ BoundingBox, Vertex }
import lns.StartupData
import lns.core.Assets.Rooms
import lns.core.anythingAssets.{ AltarAsset, AnythingAsset, ArrowAsset }
import lns.scenes.game.anything.{ AnythingView, AnythingViewModel, SimpleAnythingView }

trait ItemView[VM <: AnythingViewModel[ItemModel] | Unit] extends AnythingView[ItemModel, VM]

/**
 * View to draw a item generated by [[ItemModel]]
 */
object ItemView extends ItemView[Unit] with SimpleAnythingView {

  type View = Group

  val scale: Int            = 1
  val altair: AnythingAsset = new AltarAsset()

  def boundingBox(position: Vertex): BoundingBox =
    BoundingBox(
      position,
      Vertex(Rooms.cellSize, Rooms.cellSize)
    )

  def altairView: Graphic[Material.Bitmap] =
    Graphic(
      Rectangle(
        0,
        0,
        altair.width,
        altair.height
      ),
      1,
      Material.Bitmap(altair.asset)
    )

  def itemView(name: String): Graphic[Material.Bitmap] =
    val arrow: ArrowAsset = new ArrowAsset()
    Graphic(
      Rectangle(
        0,
        0,
        arrow.width,
        arrow.height
      ),
      1,
      Material.Bitmap(arrow.asset)
    )

  def view(contex: FrameContext[StartupData], model: Model, viewModel: ViewModel): View =
    Group()
      .addChild(altairView)
      .addChild(itemView(model.name))
      .withScale(Vector2(scale, scale))
}
